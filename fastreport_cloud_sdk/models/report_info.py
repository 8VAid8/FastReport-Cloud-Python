# coding: utf-8

"""
    FastReport Cloud

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from fastreport_cloud_sdk.configuration import Configuration


class ReportInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'author': 'str',
        'created': 'datetime',
        'creator_version': 'str',
        'description': 'str',
        'modified': 'datetime',
        'name': 'str',
        'picture': 'str',
        'preview_picture_ratio': 'float',
        'save_mode': 'str',
        'save_preview_picture': 'bool',
        'tag': 'str',
        'version': 'str'
    }

    attribute_map = {
        'author': 'author',
        'created': 'created',
        'creator_version': 'creatorVersion',
        'description': 'description',
        'modified': 'modified',
        'name': 'name',
        'picture': 'picture',
        'preview_picture_ratio': 'previewPictureRatio',
        'save_mode': 'saveMode',
        'save_preview_picture': 'savePreviewPicture',
        'tag': 'tag',
        'version': 'version'
    }

    def __init__(self, author=None, created=None, creator_version=None, description=None, modified=None, name=None, picture=None, preview_picture_ratio=None, save_mode=None, save_preview_picture=None, tag=None, version=None, local_vars_configuration=None):  # noqa: E501
        """ReportInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._author = None
        self._created = None
        self._creator_version = None
        self._description = None
        self._modified = None
        self._name = None
        self._picture = None
        self._preview_picture_ratio = None
        self._save_mode = None
        self._save_preview_picture = None
        self._tag = None
        self._version = None
        self.discriminator = None

        if author is not None:
            self.author = author
        if created is not None:
            self.created = created
        if creator_version is not None:
            self.creator_version = creator_version
        if description is not None:
            self.description = description
        if modified is not None:
            self.modified = modified
        if name is not None:
            self.name = name
        if picture is not None:
            self.picture = picture
        if preview_picture_ratio is not None:
            self.preview_picture_ratio = preview_picture_ratio
        if save_mode is not None:
            self.save_mode = save_mode
        if save_preview_picture is not None:
            self.save_preview_picture = save_preview_picture
        if tag is not None:
            self.tag = tag
        if version is not None:
            self.version = version

    @property
    def author(self):
        """Gets the author of this ReportInfo.  # noqa: E501


        :return: The author of this ReportInfo.  # noqa: E501
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this ReportInfo.


        :param author: The author of this ReportInfo.  # noqa: E501
        :type author: str
        """

        self._author = author

    @property
    def created(self):
        """Gets the created of this ReportInfo.  # noqa: E501


        :return: The created of this ReportInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ReportInfo.


        :param created: The created of this ReportInfo.  # noqa: E501
        :type created: datetime
        """

        self._created = created

    @property
    def creator_version(self):
        """Gets the creator_version of this ReportInfo.  # noqa: E501


        :return: The creator_version of this ReportInfo.  # noqa: E501
        :rtype: str
        """
        return self._creator_version

    @creator_version.setter
    def creator_version(self, creator_version):
        """Sets the creator_version of this ReportInfo.


        :param creator_version: The creator_version of this ReportInfo.  # noqa: E501
        :type creator_version: str
        """

        self._creator_version = creator_version

    @property
    def description(self):
        """Gets the description of this ReportInfo.  # noqa: E501


        :return: The description of this ReportInfo.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ReportInfo.


        :param description: The description of this ReportInfo.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def modified(self):
        """Gets the modified of this ReportInfo.  # noqa: E501


        :return: The modified of this ReportInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this ReportInfo.


        :param modified: The modified of this ReportInfo.  # noqa: E501
        :type modified: datetime
        """

        self._modified = modified

    @property
    def name(self):
        """Gets the name of this ReportInfo.  # noqa: E501


        :return: The name of this ReportInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ReportInfo.


        :param name: The name of this ReportInfo.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def picture(self):
        """Gets the picture of this ReportInfo.  # noqa: E501


        :return: The picture of this ReportInfo.  # noqa: E501
        :rtype: str
        """
        return self._picture

    @picture.setter
    def picture(self, picture):
        """Sets the picture of this ReportInfo.


        :param picture: The picture of this ReportInfo.  # noqa: E501
        :type picture: str
        """
        if (self.local_vars_configuration.client_side_validation and
                picture is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', picture)):  # noqa: E501
            raise ValueError(r"Invalid value for `picture`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")  # noqa: E501

        self._picture = picture

    @property
    def preview_picture_ratio(self):
        """Gets the preview_picture_ratio of this ReportInfo.  # noqa: E501


        :return: The preview_picture_ratio of this ReportInfo.  # noqa: E501
        :rtype: float
        """
        return self._preview_picture_ratio

    @preview_picture_ratio.setter
    def preview_picture_ratio(self, preview_picture_ratio):
        """Sets the preview_picture_ratio of this ReportInfo.


        :param preview_picture_ratio: The preview_picture_ratio of this ReportInfo.  # noqa: E501
        :type preview_picture_ratio: float
        """

        self._preview_picture_ratio = preview_picture_ratio

    @property
    def save_mode(self):
        """Gets the save_mode of this ReportInfo.  # noqa: E501


        :return: The save_mode of this ReportInfo.  # noqa: E501
        :rtype: str
        """
        return self._save_mode

    @save_mode.setter
    def save_mode(self, save_mode):
        """Sets the save_mode of this ReportInfo.


        :param save_mode: The save_mode of this ReportInfo.  # noqa: E501
        :type save_mode: str
        """
        allowed_values = ["All", "Original", "User", "Role", "Security", "Deny", "Custom"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and save_mode not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `save_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(save_mode, allowed_values)
            )

        self._save_mode = save_mode

    @property
    def save_preview_picture(self):
        """Gets the save_preview_picture of this ReportInfo.  # noqa: E501


        :return: The save_preview_picture of this ReportInfo.  # noqa: E501
        :rtype: bool
        """
        return self._save_preview_picture

    @save_preview_picture.setter
    def save_preview_picture(self, save_preview_picture):
        """Sets the save_preview_picture of this ReportInfo.


        :param save_preview_picture: The save_preview_picture of this ReportInfo.  # noqa: E501
        :type save_preview_picture: bool
        """

        self._save_preview_picture = save_preview_picture

    @property
    def tag(self):
        """Gets the tag of this ReportInfo.  # noqa: E501


        :return: The tag of this ReportInfo.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this ReportInfo.


        :param tag: The tag of this ReportInfo.  # noqa: E501
        :type tag: str
        """

        self._tag = tag

    @property
    def version(self):
        """Gets the version of this ReportInfo.  # noqa: E501


        :return: The version of this ReportInfo.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ReportInfo.


        :param version: The version of this ReportInfo.  # noqa: E501
        :type version: str
        """

        self._version = version

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ReportInfo):
            return True

        return self.to_dict() != other.to_dict()
