# coding: utf-8

"""
    FastReport Cloud

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from fastreport_cloud_sdk.configuration import Configuration


class AnalysisResultVM(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'level': 'int',
        'detail': 'str',
        'id': 'str',
        'subscription_id': 'str',
        'file_id': 'str',
        'collection_name': 'str',
        'type': 'int',
        'signature': 'str'
    }

    attribute_map = {
        'level': 'level',
        'detail': 'detail',
        'id': 'id',
        'subscription_id': 'subscriptionId',
        'file_id': 'fileId',
        'collection_name': 'collectionName',
        'type': 'type',
        'signature': 'signature'
    }

    def __init__(self, level=None, detail=None, id=None, subscription_id=None, file_id=None, collection_name=None, type=None, signature=None, local_vars_configuration=None):  # noqa: E501
        """AnalysisResultVM - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._level = None
        self._detail = None
        self._id = None
        self._subscription_id = None
        self._file_id = None
        self._collection_name = None
        self._type = None
        self._signature = None
        self.discriminator = None

        if level is not None:
            self.level = level
        if detail is not None:
            self.detail = detail
        if id is not None:
            self.id = id
        if subscription_id is not None:
            self.subscription_id = subscription_id
        if file_id is not None:
            self.file_id = file_id
        if collection_name is not None:
            self.collection_name = collection_name
        if type is not None:
            self.type = type
        if signature is not None:
            self.signature = signature

    @property
    def level(self):
        """Gets the level of this AnalysisResultVM.  # noqa: E501


        :return: The level of this AnalysisResultVM.  # noqa: E501
        :rtype: int
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this AnalysisResultVM.


        :param level: The level of this AnalysisResultVM.  # noqa: E501
        :type level: int
        """
        allowed_values = [0, 1, 2, 3]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and level not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `level` ({0}), must be one of {1}"  # noqa: E501
                .format(level, allowed_values)
            )

        self._level = level

    @property
    def detail(self):
        """Gets the detail of this AnalysisResultVM.  # noqa: E501


        :return: The detail of this AnalysisResultVM.  # noqa: E501
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this AnalysisResultVM.


        :param detail: The detail of this AnalysisResultVM.  # noqa: E501
        :type detail: str
        """

        self._detail = detail

    @property
    def id(self):
        """Gets the id of this AnalysisResultVM.  # noqa: E501


        :return: The id of this AnalysisResultVM.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AnalysisResultVM.


        :param id: The id of this AnalysisResultVM.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def subscription_id(self):
        """Gets the subscription_id of this AnalysisResultVM.  # noqa: E501


        :return: The subscription_id of this AnalysisResultVM.  # noqa: E501
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this AnalysisResultVM.


        :param subscription_id: The subscription_id of this AnalysisResultVM.  # noqa: E501
        :type subscription_id: str
        """

        self._subscription_id = subscription_id

    @property
    def file_id(self):
        """Gets the file_id of this AnalysisResultVM.  # noqa: E501


        :return: The file_id of this AnalysisResultVM.  # noqa: E501
        :rtype: str
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id):
        """Sets the file_id of this AnalysisResultVM.


        :param file_id: The file_id of this AnalysisResultVM.  # noqa: E501
        :type file_id: str
        """

        self._file_id = file_id

    @property
    def collection_name(self):
        """Gets the collection_name of this AnalysisResultVM.  # noqa: E501


        :return: The collection_name of this AnalysisResultVM.  # noqa: E501
        :rtype: str
        """
        return self._collection_name

    @collection_name.setter
    def collection_name(self, collection_name):
        """Sets the collection_name of this AnalysisResultVM.


        :param collection_name: The collection_name of this AnalysisResultVM.  # noqa: E501
        :type collection_name: str
        """

        self._collection_name = collection_name

    @property
    def type(self):
        """Gets the type of this AnalysisResultVM.  # noqa: E501


        :return: The type of this AnalysisResultVM.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AnalysisResultVM.


        :param type: The type of this AnalysisResultVM.  # noqa: E501
        :type type: int
        """
        allowed_values = [0, 1, 2, 3, 4, 5]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def signature(self):
        """Gets the signature of this AnalysisResultVM.  # noqa: E501


        :return: The signature of this AnalysisResultVM.  # noqa: E501
        :rtype: str
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """Sets the signature of this AnalysisResultVM.


        :param signature: The signature of this AnalysisResultVM.  # noqa: E501
        :type signature: str
        """

        self._signature = signature

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnalysisResultVM):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AnalysisResultVM):
            return True

        return self.to_dict() != other.to_dict()
