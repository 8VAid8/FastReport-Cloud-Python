# coding: utf-8

"""
    FastReport Cloud

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from fastreport_cloud_sdk.configuration import Configuration


class SubscriptionPlanVM(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'is_active': 'bool',
        'display_name': 'str',
        'time_period_type': 'TimePeriodType',
        'time_period': 'int',
        'readonly_time_limit_type': 'TimePeriodType',
        'readonly_time_limit': 'int',
        'templates_space_limit': 'int',
        'reports_space_limit': 'int',
        'exports_space_limit': 'int',
        'file_upload_size_limit': 'int',
        'data_source_limit': 'int',
        'max_users_count': 'int',
        'has_space_overdraft': 'bool',
        'group_limit': 'int',
        'online_designer': 'bool',
        'is_demo': 'bool',
        'url_to_buy': 'str',
        'unlimited_page': 'bool',
        'page_limit': 'int',
        'tasks': 'TaskSettingsVM'
    }

    attribute_map = {
        'id': 'id',
        'is_active': 'isActive',
        'display_name': 'displayName',
        'time_period_type': 'timePeriodType',
        'time_period': 'timePeriod',
        'readonly_time_limit_type': 'readonlyTimeLimitType',
        'readonly_time_limit': 'readonlyTimeLimit',
        'templates_space_limit': 'templatesSpaceLimit',
        'reports_space_limit': 'reportsSpaceLimit',
        'exports_space_limit': 'exportsSpaceLimit',
        'file_upload_size_limit': 'fileUploadSizeLimit',
        'data_source_limit': 'dataSourceLimit',
        'max_users_count': 'maxUsersCount',
        'has_space_overdraft': 'hasSpaceOverdraft',
        'group_limit': 'groupLimit',
        'online_designer': 'onlineDesigner',
        'is_demo': 'isDemo',
        'url_to_buy': 'urlToBuy',
        'unlimited_page': 'unlimitedPage',
        'page_limit': 'pageLimit',
        'tasks': 'tasks'
    }

    def __init__(self, id=None, is_active=None, display_name=None, time_period_type=None, time_period=None, readonly_time_limit_type=None, readonly_time_limit=None, templates_space_limit=None, reports_space_limit=None, exports_space_limit=None, file_upload_size_limit=None, data_source_limit=None, max_users_count=None, has_space_overdraft=None, group_limit=None, online_designer=None, is_demo=None, url_to_buy=None, unlimited_page=None, page_limit=None, tasks=None, local_vars_configuration=None):  # noqa: E501
        """SubscriptionPlanVM - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._is_active = None
        self._display_name = None
        self._time_period_type = None
        self._time_period = None
        self._readonly_time_limit_type = None
        self._readonly_time_limit = None
        self._templates_space_limit = None
        self._reports_space_limit = None
        self._exports_space_limit = None
        self._file_upload_size_limit = None
        self._data_source_limit = None
        self._max_users_count = None
        self._has_space_overdraft = None
        self._group_limit = None
        self._online_designer = None
        self._is_demo = None
        self._url_to_buy = None
        self._unlimited_page = None
        self._page_limit = None
        self._tasks = None
        self.discriminator = None

        self.id = id
        self.is_active = is_active
        self.display_name = display_name
        if time_period_type is not None:
            self.time_period_type = time_period_type
        self.time_period = time_period
        if readonly_time_limit_type is not None:
            self.readonly_time_limit_type = readonly_time_limit_type
        if readonly_time_limit is not None:
            self.readonly_time_limit = readonly_time_limit
        self.templates_space_limit = templates_space_limit
        self.reports_space_limit = reports_space_limit
        self.exports_space_limit = exports_space_limit
        self.file_upload_size_limit = file_upload_size_limit
        self.data_source_limit = data_source_limit
        self.max_users_count = max_users_count
        self.has_space_overdraft = has_space_overdraft
        self.group_limit = group_limit
        self.online_designer = online_designer
        self.is_demo = is_demo
        self.url_to_buy = url_to_buy
        if unlimited_page is not None:
            self.unlimited_page = unlimited_page
        if page_limit is not None:
            self.page_limit = page_limit
        if tasks is not None:
            self.tasks = tasks

    @property
    def id(self):
        """Gets the id of this SubscriptionPlanVM.  # noqa: E501


        :return: The id of this SubscriptionPlanVM.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SubscriptionPlanVM.


        :param id: The id of this SubscriptionPlanVM.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def is_active(self):
        """Gets the is_active of this SubscriptionPlanVM.  # noqa: E501


        :return: The is_active of this SubscriptionPlanVM.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this SubscriptionPlanVM.


        :param is_active: The is_active of this SubscriptionPlanVM.  # noqa: E501
        :type is_active: bool
        """

        self._is_active = is_active

    @property
    def display_name(self):
        """Gets the display_name of this SubscriptionPlanVM.  # noqa: E501


        :return: The display_name of this SubscriptionPlanVM.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this SubscriptionPlanVM.


        :param display_name: The display_name of this SubscriptionPlanVM.  # noqa: E501
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def time_period_type(self):
        """Gets the time_period_type of this SubscriptionPlanVM.  # noqa: E501


        :return: The time_period_type of this SubscriptionPlanVM.  # noqa: E501
        :rtype: TimePeriodType
        """
        return self._time_period_type

    @time_period_type.setter
    def time_period_type(self, time_period_type):
        """Sets the time_period_type of this SubscriptionPlanVM.


        :param time_period_type: The time_period_type of this SubscriptionPlanVM.  # noqa: E501
        :type time_period_type: TimePeriodType
        """

        self._time_period_type = time_period_type

    @property
    def time_period(self):
        """Gets the time_period of this SubscriptionPlanVM.  # noqa: E501


        :return: The time_period of this SubscriptionPlanVM.  # noqa: E501
        :rtype: int
        """
        return self._time_period

    @time_period.setter
    def time_period(self, time_period):
        """Sets the time_period of this SubscriptionPlanVM.


        :param time_period: The time_period of this SubscriptionPlanVM.  # noqa: E501
        :type time_period: int
        """

        self._time_period = time_period

    @property
    def readonly_time_limit_type(self):
        """Gets the readonly_time_limit_type of this SubscriptionPlanVM.  # noqa: E501


        :return: The readonly_time_limit_type of this SubscriptionPlanVM.  # noqa: E501
        :rtype: TimePeriodType
        """
        return self._readonly_time_limit_type

    @readonly_time_limit_type.setter
    def readonly_time_limit_type(self, readonly_time_limit_type):
        """Sets the readonly_time_limit_type of this SubscriptionPlanVM.


        :param readonly_time_limit_type: The readonly_time_limit_type of this SubscriptionPlanVM.  # noqa: E501
        :type readonly_time_limit_type: TimePeriodType
        """

        self._readonly_time_limit_type = readonly_time_limit_type

    @property
    def readonly_time_limit(self):
        """Gets the readonly_time_limit of this SubscriptionPlanVM.  # noqa: E501


        :return: The readonly_time_limit of this SubscriptionPlanVM.  # noqa: E501
        :rtype: int
        """
        return self._readonly_time_limit

    @readonly_time_limit.setter
    def readonly_time_limit(self, readonly_time_limit):
        """Sets the readonly_time_limit of this SubscriptionPlanVM.


        :param readonly_time_limit: The readonly_time_limit of this SubscriptionPlanVM.  # noqa: E501
        :type readonly_time_limit: int
        """

        self._readonly_time_limit = readonly_time_limit

    @property
    def templates_space_limit(self):
        """Gets the templates_space_limit of this SubscriptionPlanVM.  # noqa: E501


        :return: The templates_space_limit of this SubscriptionPlanVM.  # noqa: E501
        :rtype: int
        """
        return self._templates_space_limit

    @templates_space_limit.setter
    def templates_space_limit(self, templates_space_limit):
        """Sets the templates_space_limit of this SubscriptionPlanVM.


        :param templates_space_limit: The templates_space_limit of this SubscriptionPlanVM.  # noqa: E501
        :type templates_space_limit: int
        """

        self._templates_space_limit = templates_space_limit

    @property
    def reports_space_limit(self):
        """Gets the reports_space_limit of this SubscriptionPlanVM.  # noqa: E501


        :return: The reports_space_limit of this SubscriptionPlanVM.  # noqa: E501
        :rtype: int
        """
        return self._reports_space_limit

    @reports_space_limit.setter
    def reports_space_limit(self, reports_space_limit):
        """Sets the reports_space_limit of this SubscriptionPlanVM.


        :param reports_space_limit: The reports_space_limit of this SubscriptionPlanVM.  # noqa: E501
        :type reports_space_limit: int
        """

        self._reports_space_limit = reports_space_limit

    @property
    def exports_space_limit(self):
        """Gets the exports_space_limit of this SubscriptionPlanVM.  # noqa: E501


        :return: The exports_space_limit of this SubscriptionPlanVM.  # noqa: E501
        :rtype: int
        """
        return self._exports_space_limit

    @exports_space_limit.setter
    def exports_space_limit(self, exports_space_limit):
        """Sets the exports_space_limit of this SubscriptionPlanVM.


        :param exports_space_limit: The exports_space_limit of this SubscriptionPlanVM.  # noqa: E501
        :type exports_space_limit: int
        """

        self._exports_space_limit = exports_space_limit

    @property
    def file_upload_size_limit(self):
        """Gets the file_upload_size_limit of this SubscriptionPlanVM.  # noqa: E501


        :return: The file_upload_size_limit of this SubscriptionPlanVM.  # noqa: E501
        :rtype: int
        """
        return self._file_upload_size_limit

    @file_upload_size_limit.setter
    def file_upload_size_limit(self, file_upload_size_limit):
        """Sets the file_upload_size_limit of this SubscriptionPlanVM.


        :param file_upload_size_limit: The file_upload_size_limit of this SubscriptionPlanVM.  # noqa: E501
        :type file_upload_size_limit: int
        """

        self._file_upload_size_limit = file_upload_size_limit

    @property
    def data_source_limit(self):
        """Gets the data_source_limit of this SubscriptionPlanVM.  # noqa: E501


        :return: The data_source_limit of this SubscriptionPlanVM.  # noqa: E501
        :rtype: int
        """
        return self._data_source_limit

    @data_source_limit.setter
    def data_source_limit(self, data_source_limit):
        """Sets the data_source_limit of this SubscriptionPlanVM.


        :param data_source_limit: The data_source_limit of this SubscriptionPlanVM.  # noqa: E501
        :type data_source_limit: int
        """

        self._data_source_limit = data_source_limit

    @property
    def max_users_count(self):
        """Gets the max_users_count of this SubscriptionPlanVM.  # noqa: E501


        :return: The max_users_count of this SubscriptionPlanVM.  # noqa: E501
        :rtype: int
        """
        return self._max_users_count

    @max_users_count.setter
    def max_users_count(self, max_users_count):
        """Sets the max_users_count of this SubscriptionPlanVM.


        :param max_users_count: The max_users_count of this SubscriptionPlanVM.  # noqa: E501
        :type max_users_count: int
        """

        self._max_users_count = max_users_count

    @property
    def has_space_overdraft(self):
        """Gets the has_space_overdraft of this SubscriptionPlanVM.  # noqa: E501


        :return: The has_space_overdraft of this SubscriptionPlanVM.  # noqa: E501
        :rtype: bool
        """
        return self._has_space_overdraft

    @has_space_overdraft.setter
    def has_space_overdraft(self, has_space_overdraft):
        """Sets the has_space_overdraft of this SubscriptionPlanVM.


        :param has_space_overdraft: The has_space_overdraft of this SubscriptionPlanVM.  # noqa: E501
        :type has_space_overdraft: bool
        """

        self._has_space_overdraft = has_space_overdraft

    @property
    def group_limit(self):
        """Gets the group_limit of this SubscriptionPlanVM.  # noqa: E501


        :return: The group_limit of this SubscriptionPlanVM.  # noqa: E501
        :rtype: int
        """
        return self._group_limit

    @group_limit.setter
    def group_limit(self, group_limit):
        """Sets the group_limit of this SubscriptionPlanVM.


        :param group_limit: The group_limit of this SubscriptionPlanVM.  # noqa: E501
        :type group_limit: int
        """

        self._group_limit = group_limit

    @property
    def online_designer(self):
        """Gets the online_designer of this SubscriptionPlanVM.  # noqa: E501


        :return: The online_designer of this SubscriptionPlanVM.  # noqa: E501
        :rtype: bool
        """
        return self._online_designer

    @online_designer.setter
    def online_designer(self, online_designer):
        """Sets the online_designer of this SubscriptionPlanVM.


        :param online_designer: The online_designer of this SubscriptionPlanVM.  # noqa: E501
        :type online_designer: bool
        """

        self._online_designer = online_designer

    @property
    def is_demo(self):
        """Gets the is_demo of this SubscriptionPlanVM.  # noqa: E501


        :return: The is_demo of this SubscriptionPlanVM.  # noqa: E501
        :rtype: bool
        """
        return self._is_demo

    @is_demo.setter
    def is_demo(self, is_demo):
        """Sets the is_demo of this SubscriptionPlanVM.


        :param is_demo: The is_demo of this SubscriptionPlanVM.  # noqa: E501
        :type is_demo: bool
        """

        self._is_demo = is_demo

    @property
    def url_to_buy(self):
        """Gets the url_to_buy of this SubscriptionPlanVM.  # noqa: E501


        :return: The url_to_buy of this SubscriptionPlanVM.  # noqa: E501
        :rtype: str
        """
        return self._url_to_buy

    @url_to_buy.setter
    def url_to_buy(self, url_to_buy):
        """Sets the url_to_buy of this SubscriptionPlanVM.


        :param url_to_buy: The url_to_buy of this SubscriptionPlanVM.  # noqa: E501
        :type url_to_buy: str
        """

        self._url_to_buy = url_to_buy

    @property
    def unlimited_page(self):
        """Gets the unlimited_page of this SubscriptionPlanVM.  # noqa: E501


        :return: The unlimited_page of this SubscriptionPlanVM.  # noqa: E501
        :rtype: bool
        """
        return self._unlimited_page

    @unlimited_page.setter
    def unlimited_page(self, unlimited_page):
        """Sets the unlimited_page of this SubscriptionPlanVM.


        :param unlimited_page: The unlimited_page of this SubscriptionPlanVM.  # noqa: E501
        :type unlimited_page: bool
        """

        self._unlimited_page = unlimited_page

    @property
    def page_limit(self):
        """Gets the page_limit of this SubscriptionPlanVM.  # noqa: E501


        :return: The page_limit of this SubscriptionPlanVM.  # noqa: E501
        :rtype: int
        """
        return self._page_limit

    @page_limit.setter
    def page_limit(self, page_limit):
        """Sets the page_limit of this SubscriptionPlanVM.


        :param page_limit: The page_limit of this SubscriptionPlanVM.  # noqa: E501
        :type page_limit: int
        """

        self._page_limit = page_limit

    @property
    def tasks(self):
        """Gets the tasks of this SubscriptionPlanVM.  # noqa: E501


        :return: The tasks of this SubscriptionPlanVM.  # noqa: E501
        :rtype: TaskSettingsVM
        """
        return self._tasks

    @tasks.setter
    def tasks(self, tasks):
        """Sets the tasks of this SubscriptionPlanVM.


        :param tasks: The tasks of this SubscriptionPlanVM.  # noqa: E501
        :type tasks: TaskSettingsVM
        """

        self._tasks = tasks

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubscriptionPlanVM):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SubscriptionPlanVM):
            return True

        return self.to_dict() != other.to_dict()
