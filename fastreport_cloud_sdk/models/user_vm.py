# coding: utf-8

"""
    FastReport Cloud

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from fastreport_cloud_sdk.configuration import Configuration


class UserVM(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'subscriptions': 'list[str]',
        'groups': 'list[str]',
        'admin_permission': 'AdminPermission',
        'is_admin': 'bool',
        'name': 'str',
        'username': 'str',
        'email': 'str'
    }

    attribute_map = {
        'id': 'id',
        'subscriptions': 'subscriptions',
        'groups': 'groups',
        'admin_permission': 'adminPermission',
        'is_admin': 'isAdmin',
        'name': 'name',
        'username': 'username',
        'email': 'email'
    }

    def __init__(self, id=None, subscriptions=None, groups=None, admin_permission=None, is_admin=None, name=None, username=None, email=None, local_vars_configuration=None):  # noqa: E501
        """UserVM - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._subscriptions = None
        self._groups = None
        self._admin_permission = None
        self._is_admin = None
        self._name = None
        self._username = None
        self._email = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if subscriptions is not None:
            self.subscriptions = subscriptions
        if groups is not None:
            self.groups = groups
        if admin_permission is not None:
            self.admin_permission = admin_permission
        if is_admin is not None:
            self.is_admin = is_admin
        if name is not None:
            self.name = name
        if username is not None:
            self.username = username
        if email is not None:
            self.email = email

    @property
    def id(self):
        """Gets the id of this UserVM.  # noqa: E501


        :return: The id of this UserVM.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserVM.


        :param id: The id of this UserVM.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def subscriptions(self):
        """Gets the subscriptions of this UserVM.  # noqa: E501


        :return: The subscriptions of this UserVM.  # noqa: E501
        :rtype: list[str]
        """
        return self._subscriptions

    @subscriptions.setter
    def subscriptions(self, subscriptions):
        """Sets the subscriptions of this UserVM.


        :param subscriptions: The subscriptions of this UserVM.  # noqa: E501
        :type subscriptions: list[str]
        """

        self._subscriptions = subscriptions

    @property
    def groups(self):
        """Gets the groups of this UserVM.  # noqa: E501


        :return: The groups of this UserVM.  # noqa: E501
        :rtype: list[str]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this UserVM.


        :param groups: The groups of this UserVM.  # noqa: E501
        :type groups: list[str]
        """

        self._groups = groups

    @property
    def admin_permission(self):
        """Gets the admin_permission of this UserVM.  # noqa: E501


        :return: The admin_permission of this UserVM.  # noqa: E501
        :rtype: AdminPermission
        """
        return self._admin_permission

    @admin_permission.setter
    def admin_permission(self, admin_permission):
        """Sets the admin_permission of this UserVM.


        :param admin_permission: The admin_permission of this UserVM.  # noqa: E501
        :type admin_permission: AdminPermission
        """

        self._admin_permission = admin_permission

    @property
    def is_admin(self):
        """Gets the is_admin of this UserVM.  # noqa: E501


        :return: The is_admin of this UserVM.  # noqa: E501
        :rtype: bool
        """
        return self._is_admin

    @is_admin.setter
    def is_admin(self, is_admin):
        """Sets the is_admin of this UserVM.


        :param is_admin: The is_admin of this UserVM.  # noqa: E501
        :type is_admin: bool
        """

        self._is_admin = is_admin

    @property
    def name(self):
        """Gets the name of this UserVM.  # noqa: E501


        :return: The name of this UserVM.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserVM.


        :param name: The name of this UserVM.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def username(self):
        """Gets the username of this UserVM.  # noqa: E501


        :return: The username of this UserVM.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this UserVM.


        :param username: The username of this UserVM.  # noqa: E501
        :type username: str
        """

        self._username = username

    @property
    def email(self):
        """Gets the email of this UserVM.  # noqa: E501


        :return: The email of this UserVM.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserVM.


        :param email: The email of this UserVM.  # noqa: E501
        :type email: str
        """

        self._email = email

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserVM):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserVM):
            return True

        return self.to_dict() != other.to_dict()
