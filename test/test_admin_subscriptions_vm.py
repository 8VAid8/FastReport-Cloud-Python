# coding: utf-8

"""
    FastReport Cloud

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import fastreport_cloud_sdk
from fastreport_cloud_sdk.models.admin_subscriptions_vm import AdminSubscriptionsVM  # noqa: E501
from fastreport_cloud_sdk.rest import ApiException

class TestAdminSubscriptionsVM(unittest.TestCase):
    """AdminSubscriptionsVM unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test AdminSubscriptionsVM
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = fastreport_cloud_sdk.models.admin_subscriptions_vm.AdminSubscriptionsVM()  # noqa: E501
        if include_optional :
            return AdminSubscriptionsVM(
                subscriptions = [
                    fastreport_cloud_sdk.models.admin_subscription_vm.AdminSubscriptionVM(
                        default_permissions = fastreport_cloud_sdk.models.default_permissions.DefaultPermissions(
                            file_permissions = fastreport_cloud_sdk.models.file_permissions.FilePermissions(
                                owner_id = '', 
                                owner = fastreport_cloud_sdk.models.file_permission.FilePermission(
                                    create = 0, 
                                    delete = 0, 
                                    execute = 0, 
                                    get = 0, 
                                    update = 0, 
                                    administrate = 0, ), 
                                groups = {
                                    'key' : fastreport_cloud_sdk.models.file_permission.FilePermission(
                                        create = 0, 
                                        delete = 0, 
                                        execute = 0, 
                                        get = 0, 
                                        update = 0, 
                                        administrate = 0, )
                                    }, 
                                other = fastreport_cloud_sdk.models.file_permission.FilePermission(
                                    create = 0, 
                                    delete = 0, 
                                    execute = 0, 
                                    get = 0, 
                                    update = 0, 
                                    administrate = 0, ), 
                                anon = fastreport_cloud_sdk.models.file_permission.FilePermission(
                                    create = 0, 
                                    delete = 0, 
                                    execute = 0, 
                                    get = 0, 
                                    update = 0, 
                                    administrate = 0, ), ), 
                            group_permissions = fastreport_cloud_sdk.models.group_permissions.GroupPermissions(
                                owner_id = '', ), 
                            data_source_permissions = fastreport_cloud_sdk.models.data_source_permissions.DataSourcePermissions(
                                owner_id = '', ), ), 
                        id = '', 
                        name = '', 
                        locale = '', 
                        current = fastreport_cloud_sdk.models.subscription_period_vm.SubscriptionPeriodVM(
                            start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            plan = fastreport_cloud_sdk.models.subscription_plan_vm.SubscriptionPlanVM(
                                id = '', 
                                is_active = True, 
                                display_name = '', 
                                time_period_type = 'Second', 
                                time_period = 56, 
                                readonly_time_limit_type = 'Second', 
                                readonly_time_limit = 56, 
                                templates_space_limit = 56, 
                                reports_space_limit = 56, 
                                exports_space_limit = 56, 
                                file_upload_size_limit = 56, 
                                data_source_limit = 56, 
                                max_users_count = 56, 
                                has_space_overdraft = True, 
                                group_limit = 56, 
                                online_designer = True, 
                                is_demo = True, 
                                url_to_buy = '', 
                                unlimited_page = True, 
                                page_limit = 56, ), ), 
                        old = [
                            fastreport_cloud_sdk.models.subscription_period_vm.SubscriptionPeriodVM(
                                start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                            ], 
                        templates_folder = fastreport_cloud_sdk.models.subscription_folder.SubscriptionFolder(
                            folder_id = '', 
                            bytes_used = 56, ), 
                        reports_folder = fastreport_cloud_sdk.models.subscription_folder.SubscriptionFolder(
                            folder_id = '', 
                            bytes_used = 56, ), 
                        exports_folder = fastreport_cloud_sdk.models.subscription_folder.SubscriptionFolder(
                            folder_id = '', 
                            bytes_used = 56, ), )
                    ], 
                count = 56, 
                skip = 56, 
                take = 56
            )
        else :
            return AdminSubscriptionsVM(
        )

    def testAdminSubscriptionsVM(self):
        """Test AdminSubscriptionsVM"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
